# DeepNeed AI 生产环境 Docker Compose 配置
version: '3.8'

services:
  # =====================================================
  # Nginx 反向代理 + 前端静态文件服务
  # =====================================================
  nginx:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
      target: production
    container_name: deepneed-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    environment:
      - NGINX_WORKER_PROCESSES=auto
    depends_on:
      - backend
    networks:
      - deepneed-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # =====================================================
  # 后端 API 服务 (FastAPI)
  # =====================================================
  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
      target: production
    container_name: deepneed-backend-prod
    expose:
      - "8000"
    volumes:
      - backend-data:/app/data
      - backend-logs:/app/logs
    environment:
      - PYTHONPATH=/app
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://deepneed:${POSTGRES_PASSWORD}@postgres:5432/deepneed_prod
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
    networks:
      - deepneed-prod
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # =====================================================
  # PostgreSQL 数据库 - 生产配置
  # =====================================================
  postgres:
    image: postgres:15-alpine
    container_name: deepneed-postgres-prod
    expose:
      - "5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - postgres-backup:/backup
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    environment:
      - POSTGRES_DB=deepneed_prod
      - POSTGRES_USER=deepneed
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - deepneed-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # =====================================================
  # Redis 缓存 - 生产配置
  # =====================================================
  redis:
    image: redis:7-alpine
    container_name: deepneed-redis-prod
    expose:
      - "6379"
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    networks:
      - deepneed-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # =====================================================
  # 监控和日志 - Prometheus + Grafana
  # =====================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: deepneed-prometheus-prod
    expose:
      - "9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - deepneed-prod
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: deepneed-grafana-prod
    expose:
      - "3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - deepneed-prod
    restart: unless-stopped

  # =====================================================
  # 备份服务
  # =====================================================
  backup:
    image: postgres:15-alpine
    container_name: deepneed-backup-prod
    volumes:
      - postgres-backup:/backup
      - ./docker/scripts/backup.sh:/backup.sh
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=deepneed_prod
      - POSTGRES_USER=deepneed
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - postgres
    networks:
      - deepneed-prod
    entrypoint: ["/bin/sh", "-c"]
    command: ["while true; do sleep 86400; sh /backup.sh; done"]
    restart: unless-stopped

# =====================================================
# 数据卷定义
# =====================================================
volumes:
  backend-data:
    driver: local
  backend-logs:
    driver: local
  postgres-data:
    driver: local
  postgres-backup:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# =====================================================
# 网络定义
# =====================================================
networks:
  deepneed-prod:
    driver: bridge
    name: deepneed-prod-network 